"use strict";!function(){var t=function(){var t=this;t.getOptions=function(){t.container=document.querySelector(".shopList"),t.content=document.querySelector(".shopListMain__content"),t.template=document.querySelector("#shopListItem").innerHTML,t.openFooterBtn=document.querySelector(".shopListMain__open"),t.footer=document.querySelector(".shopListFooter"),t.input=document.querySelector(".shopListFooter__input"),t.hidden=document.querySelector(".shopListFooter__hidden"),t.form=document.querySelector(".shopListFooter__form"),t.submitBtn=document.querySelector(".shopListFooter__btn.shopListFooter__btn_type_submit"),t.shopList=[]},t.loadData=function(){var e=localStorage.getItem("shopList");e&&(t.shopList=JSON.parse(e))},t.setupListener=function(){t.openFooterBtn.addEventListener("click",function(e){e.preventDefault(),t.openFooter()}),t.footer.addEventListener("click",function(e){e.target===t.footer&&0===t.input.value.length&&t.closeFooter()}),t.input.addEventListener("keyup",t.handleKeyUp),t.form.addEventListener("submit",t.submit),t.submitBtn.addEventListener("click",t.handleFocus),t.container.addEventListener("click",t.routeClick)},t.routeClick=function(e){var n=e.target,o="";n.classList.contains("shopListItem__content")?o="toggleItemPanel":n.classList.contains("shopListItem__btn_type_complete")?o="complete":n.classList.contains("shopListItem__btn_type_edit")&&(o="edit"),o&&t[o](e)},t.toggleItemPanel=function(e){var n=e.target;if(n.classList.contains("shopListItem__content")){var o=n.getAttribute("data-id");o&&(t.shopList=t.shopList.map(function(t){return t.id==o&&(t.isOpen=!t.isOpen),t}),t.render(),t.updateLocalStorage())}},t.complete=function(e){var n=e.target,o=n.getAttribute("data-id");o&&(t.shopList=t.shopList.filter(function(t){return t.id!=o}),t.render(),t.updateLocalStorage())},t.edit=function(e){var n=e.target,o=n.getAttribute("data-id"),i=t.shopList.find(function(t){return t.id==o});o&&i&&(t.input.value=i.title,t.hidden.value=o,t.openFooter())},t.openFooter=function(){t.container.classList.add("shopList_state_add"),setTimeout(function(){t.initFocus()},300)},t.closeFooter=function(){t.container.classList.remove("shopList_state_add")},t.handleKeyUp=function(){var e=t.input.value,n=e.length,o=n>0?"add":"remove";t.container.classList[o]("shopList_state_valid")},t.handleFocus=function(e){e.preventDefault(),t.submit()},t.initFocus=function(){t.input.focus()},t.submit=function(e){e&&e.preventDefault();var n=t.input.value,o=t.hidden.value,i=n.length;if(0===i)return!1;var s=t.shopList.length,r=o?o:"0"===s?"0":""+(s+1),a=!1,c=t.shopList.find(function(t){return t.id==r});c?(c.title=n,t.closeFooter()):t.shopList.push({id:r,title:n,isOpen:a}),t.reset(),t.render(),t.updateLocalStorage()},t.reset=function(){t.form.reset(),t.hidden.value=""},t.render=function(){var e=document.createElement("ul");e.classList.add("shopListMain__list"),t.shopList.forEach(function(n){var o=document.createElement("li");o.classList.add("shopListMain__item"),o.innerHTML=t.template,o.querySelector(".shopListItem__content").setAttribute("data-id",n.id),o.querySelector(".shopListItem__content").innerHTML=n.title,o.querySelector(".shopListItem__btn_type_complete").setAttribute("data-id",n.id),o.querySelector(".shopListItem__btn_type_edit").setAttribute("data-id",n.id),n.isOpen&&o.querySelector(".shopListItem").classList.add("shopListItem_state_open"),e.appendChild(o)}),t.content.innerHTML="",t.content.appendChild(e)},t.updateLocalStorage=function(){var e=JSON.stringify(t.shopList);localStorage.setItem("shopList",e)},t.init=function(){t.getOptions(),t.setupListener(),t.loadData(),t.render()}},e=new t;window.addEventListener("load",function(){return e.init()}),document.addEventListener("deviceready",function(){return e.init()})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
