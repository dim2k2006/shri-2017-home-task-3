"use strict";!function(){var t=function(){var t=this;t.getOptions=function(){t.container=document.querySelector(".shopList"),t.content=document.querySelector(".shopListMain__content"),t.template=document.querySelector("#shopListItem").innerHTML,t.openFooterBtn=document.querySelector(".shopListMain__open"),t.footer=document.querySelector(".shopListFooter"),t.input=document.querySelector(".shopListFooter__input"),t.shopList=[]},t.loadData=function(){var e=localStorage.getItem("shopList");e&&(t.shopList=JSON.parse(e))},t.setupListener=function(){t.openFooterBtn.addEventListener("click",t.openFooter),t.footer.addEventListener("click",t.closeFooter),t.input.addEventListener("keyup",t.handleKeyUp)},t.openFooter=function(e){e.preventDefault(),t.container.classList.add("shopList_state_add")},t.closeFooter=function(e){e.target===t.footer&&0===t.input.value.length&&t.container.classList.remove("shopList_state_add")},t.handleKeyUp=function(){var e=t.input.value,n=e.length,o=n>0?"add":"remove";t.container.classList[o]("shopList_state_valid")},t.render=function(){var e=document.createElement("ul");e.classList.add("shopListMain__list"),t.shopList.forEach(function(n){var o=document.createElement("li");o.classList.add("shopListMain__item"),o.innerHTML=t.template,o.querySelector(".shopListItem").id=n.id,o.querySelector(".shopListItem__content").innerHTML=n.title,n.isOpen&&o.classList.add("shopListItem_state_open"),e.appendChild(o)}),t.content.innerHTML="",t.content.appendChild(e)},t.updateLocalStorage=function(){var e=JSON.stringify(t.shopList);localStorage.setItem("shopList",e)},t.init=function(){t.getOptions(),t.setupListener(),t.loadData(),t.render()}},e=new t;window.addEventListener("load",function(){return e.init()}),document.addEventListener("deviceready",function(){return e.init()})}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
